#!/usr/bin/env python

#-----------------------------------------------------------------------------
# Copyright (c) 2011-2015, The BIOM Format Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#-----------------------------------------------------------------------------

import click
import biom
import sys
import biom.cli
import biom.cli.table_converter
from biom.util import HAVE_H5PY
import biom.parse
import biom.util


@click.group()
@click.version_option(version=biom.__version__)
def cli():
    pass

@cli.command(name='summarize-table')
@click.option('-i', '--input-fp', required=True,
              type=click.Path(exists=True, dir_okay=False),
              help='The input BIOM table')
@click.option('-o', '--output-fp', default=None,
              type=click.Path(writable=True, dir_okay=False),
              help='An output file-path')
@click.option('--qualitative', default=False, is_flag=True,
              help="Present counts as number of unique observation ids per"
                    " sample, rather than counts of observations per sample.")
@click.option('--observations', default=False, is_flag=True,
              help="Summarize over observations")
def summarize_table(input_fp, output_fp, qualitative, observations):
    """Summarize sample or observation data in a BIOM table

    Provides details on the observation counts per sample, including summary
    statistics, as well as metadata categories associated with samples and
    observations.

    Example usage:

    Write a summary of table.biom to table_summary.txt:

    $ biom summarize-table -i table.biom -o table_summary.txt

    """
    table =  biom.load_table(input_fp)
    result = biom.cli.summarize_table(table, qualitative, observations)
    if output_fp:
        with open(output_fp, 'w') as fh:
            fh.write(result)
    else:
        click.echo(result)

@cli.command(name='add-metadata')
@click.option('-i', '--input-fp', required=True,
              type=click.Path(exists=True, dir_okay=False),
              help='The input BIOM table')
@click.option('-o', '--output-fp', required=True,
              type=click.Path(exists=False, dir_okay=False),
              help='The output BIOM table')
@click.option('-m', '--sample-metadata-fp', required=False,
              type=click.Path(exists=True, dir_okay=False),
              help='The sample metadata mapping file (will add sample '
                   'metadata to the input BIOM table, if provided).')
@click.option('--observation-metadata-fp', required=False,
              type=click.Path(exists=True, dir_okay=False),
              help='The observation metadata mapping file (will add '
                   'observation metadata to the input BIOM table, if '
                   'provided).')
@click.option('--sc-separated', required=False, type=click.STRING,
              help='Comma-separated list of the metadata fields to split '
                   'on semicolons. This is useful for hierarchical data such '
                   'as taxonomy or functional categories.')
@click.option('--sc-pipe-separated', required=False, type=click.STRING,
              help='Comma-separated list of the metadata fields to split '
                   'on semicolons and pipes ("|"). This is useful for '
                   'hierarchical data such as functional categories with '
                   'one-to-many mappings (e.g. x;y;z|x;y;w)).')
@click.option('--int-fields', required=False, type=click.STRING,
              help='Comma-separated list of the metadata fields to cast '
                   'to integers. This is useful for integer data such as '
                   '"DaysSinceStart".')
@click.option('--float-fields', required=False, type=click.STRING,
              help='Comma-separated list of the metadata fields to cast '
                   'to floating point numbers. This is useful for real number '
                   'data such as "pH".')
@click.option('--sample-header', required=False, type=click.STRING,
              help='Comma-separated list of the sample metadata field '
                   'names. This is useful if a header line is not provided '
                   'with the metadata, if you want to rename the fields, or '
                   'if you want to include only the first n fields where n is '
                   'the number of entries provided here.')
@click.option('--observation-header', required=False, type=click.STRING,
              help='Comma-separated list of the observation metadata '
                   'field names. This is useful if a header line is not '
                   'provided with the metadata, if you want to rename the '
                   'fields, or if you want to include only the first n fields '
                   'where n is the number of entries provided here.')
@click.option('--output-as-json', default=not HAVE_H5PY, is_flag=True,
              help='Write the output file in JSON format.')
def add_metadata(input_fp, output_fp, sample_metadata_fp,
                 observation_metadata_fp, sc_separated, sc_pipe_separated,
                 int_fields, float_fields, sample_header, observation_header,
                 output_as_json):
    """Add metadata to a BIOM table

    Add sample and/or observation metadata to BIOM-formatted files. See
    examples here: http://biom-format.org/documentation/adding_metadata.html

    Example usage:

    Add sample metadata to a BIOM table:

    $ biom add-metadata -i otu_table.biom -o table_with_sample_metadata.biom
      -m sample_metadata.txt
    """
    table = biom.load_table(input_fp)
    if sample_metadata_fp is not None:
        sample_metadata_f = open(sample_metadata_fp, 'U')
    else:
        sample_metadata_f = None
    if observation_metadata_fp is not None:
        observation_metadata_f = open(observation_metadata_fp, 'U')
    else:
        observation_metadata_f = None
    if sc_separated is not None:
        sc_separated = sc_separated.split(',')
    if sc_pipe_separated is not None:
        sc_pipe_separated = sc_pipe_separated.split(',')
    if int_fields is not None:
        int_fields = int_fields.split(',')
    if float_fields is not None:
        float_fields = float_fields.split(',')
    if sample_header is not None:
        sample_header = sample_header.split(',')
    if observation_header is not None:
        observation_header = observation_header.split(',')

    result = biom.cli.add_metadata(table, sample_metadata_f,
                                   observation_metadata_f,
                                   sc_separated,
                                   sc_pipe_separated,
                                   int_fields,
                                   float_fields,
                                   sample_header,
                                   observation_header)

    if output_as_json:
        fmt = 'json'
    else:
        fmt = 'hdf5'

    biom.cli.write_biom_table(result, fmt, output_fp)


@cli.command(name='convert')
@click.option('-i', '--input-fp', required=True,
              type=click.Path(exists=True, dir_okay=False),
              help='The input BIOM table')
@click.option('-o', '--output-fp', required=True,
              type=click.Path(exists=False, dir_okay=False),
              help='The output BIOM table')
@click.option('-m', '--sample-metadata-fp', required=False,
              type=click.Path(exists=True, dir_okay=False),
              help='The sample metadata mapping file (will add sample '
                   'metadata to the input BIOM table, if provided).')
@click.option('--observation-metadata-fp', required=False,
              type=click.Path(exists=True, dir_okay=False),
              help='The observation metadata mapping file (will add '
                   'observation metadata to the input BIOM table, if '
                   'provided).')
@click.option('--to-json', default=False, is_flag=True,
              help='Output as JSON-formatted table.')
@click.option('--to-hdf5', default=False, is_flag=True,
         help='Output as HDF5-formatted table.')
@click.option('--to-tsv', default=False, is_flag=True,
    help='Output as TSV-formatted (classic) table.')
@click.option('--collapsed-samples', default=False, is_flag=True,
              help='If --to_hdf5 is passed and the original table is a '
                   'BIOM table with collapsed samples, this will '
                   'update the sample metadata of the table to '
                   'the supported HDF5 collapsed format.')
@click.option('--collapsed-observations', default=False, is_flag=True,
              help='If --to_hdf5 is passed and the original table is a '
                   'BIOM table with collapsed observations, this will '
                   'update the observation metadata of the table '
                   'to the supported HDF5 collapsed format.')
@click.option('--header-key', required=False, type=click.STRING,
              help='The observation metadata to include from the input '
                   'BIOM table file when creating a tsv table file. '
                   'By default no observation metadata will be included.')
@click.option('--output-metadata-id', required=False, type=click.STRING,
              help='The name to be given to the observation metadata '
                   'column when creating a tsv table file if the column '
                   'should be renamed.')
@click.option('--table-type', required=False,
              type=click.Choice(biom.cli.table_converter.table_types),
              help='The type of the table.')
@click.option('--process-obs-metadata', required=False,
              type=click.Choice(
                biom.cli.table_converter.observation_metadata_types),
              help='Process metadata associated with observations when '
              'converting from a classic table.')
@click.option('--tsv-metadata-formatter', required=False,
              default='sc_separated',
              type=click.Choice(
                biom.cli.table_converter.observation_metadata_formatters),
              help='Method for formatting the observation metadata.')
def convert(input_fp, output_fp, sample_metadata_fp, observation_metadata_fp,
            to_json, to_hdf5, to_tsv, collapsed_samples,
            collapsed_observations, header_key, output_metadata_id, table_type,
            process_obs_metadata, tsv_metadata_formatter):
    """Convert to/from the BIOM table format

    Convert between BIOM table formats. See examples here:
    http://biom-format.org/documentation/biom_conversion.html

    Example usage:

    Convert a "classic" BIOM file (tab-separated text) to an HDF5 BIOM
    formatted OTU table:

    $ biom convert -i table.txt -o table.biom --to-hdf5
    """
    if to_json:
        fmt = 'json'
    elif to_hdf5:
        fmt = 'hdf5'
    elif to_tsv:
        fmt = 'tsv'
    else:
        raise ValueError("Must provide one of --to-tsv, --to-json, or "
                         "--to-hdf5.")
    if sum([to_tsv, to_hdf5, to_json]) > 1:
        raise ValueError("--to-tsv, --to-json, and --to-hdf5 are mutually "
                         "exclusive. You can only pass one of these options.")

    table = biom.load_table(input_fp)
    if sample_metadata_fp is not None:
        with open(sample_metadata_fp, 'U') as f:
            sample_metadata_f = biom.parse.MetadataMap.from_file(f)
    else:
        sample_metadata_f = None
    if observation_metadata_fp is not None:
        with open(observation_metadata_fp, 'U') as f:
            observation_metadata_f = biom.parse.MetadataMap.from_file(f)
    else:
        observation_metadata_f = None

    biom.cli.convert(table, output_fp, sample_metadata_f,
                     observation_metadata_f,
                     to_json, to_hdf5, to_tsv, collapsed_samples,
                     collapsed_observations, header_key,
                     output_metadata_id, table_type,
                     process_obs_metadata, tsv_metadata_formatter)

@cli.command(name='show-install-info')
def show_install_info():
    """Provide information about the biom-format installation

    Provide information about the biom-format installation, including settings
    pulled from the configuration file. For more details, see
    http://biom-format.org

    Example usage:

    Display biom-format installation information:

    $ biom show-install-info

    """
    click.echo(biom.cli.show_install_info())


@cli.command(name='subset-table')
@click.option( '-i', '--input-hdf5-fp', default=None,
              type=click.Path(exists=True, dir_okay=False),
              help='the input hdf5 BIOM table filepath to subset')
@click.option( '-j', '--input-json-fp', default=None,
              type=click.Path(exists=True, dir_okay=False),
              help='the input json BIOM table filepath to subset')
@click.option( '-a', '--axis', required=True,
              type=click.Choice(['sample', 'observation']),
              help='the axis to subset over, either sample or observation')
@click.option( '-s', '--ids', required=True,
              type=click.Path(exists=True, dir_okay=False),
              help='a file containing a single column of IDs to retain '
                   '(either sample IDs or observation IDs, depending on the '
                   'axis)')
@click.option('-o', '--output-fp', required=True,
              type=click.Path(writable=True, dir_okay=False),
              help='the output BIOM table filepath')
def subset_table(input_hdf5_fp, input_json_fp, axis, ids, output_fp):
    """Subset a BIOM table

    Subset a BIOM table, over either observations or samples, without fully
    parsing it. This command is intended to assist in working with very large
    tables when tight on memory, or as a lightweight way to subset a full
    table. Currently, it is possible to produce tables with rows or columns
    (observations or samples) that are fully zeroed.

    Example usage:

    Choose a subset of the observations in table.biom (JSON) and write them to
    subset.biom:

    $ biom subset-table -j table.biom -a observations -s observation_ids.txt \
           -o subset.biom

    Choose a subset of the observations in table.biom (HDF5) and write them to
    subset.biom:

    $ biom subset-table -i table.biom -a observations -s observation_ids.txt \
           -o subset.biom

    """
    if input_json_fp is not None:
        with open(input_json_fp, 'U') as f:
            input_json_fp = f.read()

    with open(ids, 'U') as f:
        ids = [line.strip() for line in f]

    table, format_ = biom.cli.subset_table(input_hdf5_fp, input_json_fp, axis,
                                           ids)

    if format_ == 'json':
        with open(output_fp, 'w') as f:
            for line in table:
                f.write(line)
                f.write('\n')
    else:
        if biom.util.HAVE_H5PY:
            import h5py
        else:
            # This should never be raised here
            raise ImportError("h5py is not available, cannot write HDF5!")

        with h5py.File(output_fp, 'w') as f:
            table.to_hdf5(f, biom.parse.generatedby())


@cli.command(name='normalize-table')
@click.option( '-i', '--input-fp', required=True,
              type=click.Path(exists=True, dir_okay=False),
              help='The input BIOM table')
@click.option('-o', '--output-fp', default=None,
              type=click.Path(writable=True),
              help='An output file-path')
@click.option('-r', '--relative-abund', default=False, is_flag=True,
              help='convert table to relative abundance',
              required=False)
@click.option('-p', '--presence-absence', default=False, is_flag=True,
              help='convert table to presence/absence',
              required=False)
@click.option('-a', '--axis', default='sample',
              type=click.Choice(['sample', 'observation']),
              help='The axis to normalize over')
def normalize_table(input_fp, output_fp, relative_abund, presence_absence,
                    axis):
    """Normalize a BIOM table

    Normalize the values of a BIOM table through various methods. Relative
    abundance will take the relative abundance of each observation in terms of
    samples or observations.  Presence absensece will convert observations to
    1's and 0's based on presence of the observation.

    Example usage:

    Normalizing a BIOM table to relative abundnace:

    $ biom normalize-table -i table.biom -r -o normalized_table.biom

    Converting a BIOM table to a presence/absence table:

    $ biom normalize-table -i table.biom -p -o converted_table.biom
    """
    table = biom.load_table(input_fp)
    result = biom.cli.normalize_table(table, relative_abund, presence_absence,
                                      axis)

    biom.cli.write_biom_table(result, 'hdf5' if HAVE_H5PY else 'json',
                              output_fp)


@cli.command()
@click.option('-i', '--input-fp', required=True,
              type=click.Path(exists=True, dir_okay=False),
              help='The input BIOM table')
@click.option('-o', '--output-fp', default=None,
              type=click.Path(writable=True),
              help='An output file-path', required=False)
@click.option('-n', '--n-obs', default=5, type=int,
              help="The number of observations to show",
              required=False)
@click.option('-m', '--n-samp', default=5, type=int,
              help="The number of samples to show",
              required=False)
def head(input_fp, output_fp, n_obs, n_samp):
    """Dump the first bit of a table

    Example usage:

    Print out the upper left corner of a BIOM table to standard out:

    $ biom head -i table.biom
    """
    table = biom.load_table(input_fp).head(n=n_obs, m=n_samp)

    if output_fp is None:
        click.echo(str(table))
    else:
        with open(output_fp, 'w') as fp:
            fp.write(str(table))


@cli.command(name='validate-table')
@click.option('-i', '--input-fp', required=True,
              type=click.Path(exists=True, dir_okay=False),
              help='The input filpath to validate against the BIOM format'
                   ' specification')
@click.option('-f', '--format-version', default=None,
              help='The specific format version to validate against')
@click.option('--detailed-report', is_flag=True, default=False,
              help='Include more details in the output report')
def validate_table(input_fp, format_version, detailed_report):
    """Validate a BIOM-formatted file

    Test a file for adherence to the Biological Observation Matrix (BIOM)
    format specification. This specification is defined at
    http://biom-format.org

    Example usage:

    Validate the contents of table.biom for adherence to the BIOM format
    specification

    $ biom validate-table -i table.biom

    """
    valid, report = biom.cli.validate_table(input_fp, format_version,
                                            detailed_report)
    click.echo("\n".join(report))
    if valid:
        # apparently silence is too quiet to be golden.
        click.echo("The input file is a valid BIOM-formatted file.")
        sys.exit(0)
    else:
        click.echo("The input file is not a valid BIOM-formatted file.")
        sys.exit(1)


if __name__ == '__main__':
    cli()
